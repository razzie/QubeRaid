/**
 * Copyright (c) 2016 Gábor Görzsöny (www.gorzsony.com)
 *
 * This source is a private work and can be used only with the
 * written permission of the author. Do not redistribute it!
 * All rights reserved.
 */

#include <cmath>
#include "application.hpp"
#include "utils/inputmanager.hpp"
#include "utils/mousepointer.hpp"

using namespace irr;


static unsigned char mouse[] = {
	0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
	0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7a, 0x7a,
	0xf4, 0x00, 0x00, 0x00, 0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xae, 0xce, 0x1c, 0xe9, 0x00, 0x00,
	0x00, 0x04, 0x67, 0x41, 0x4d, 0x41, 0x00, 0x00, 0xb1, 0x8f, 0x0b, 0xfc, 0x61, 0x05, 0x00, 0x00,
	0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0e, 0xc3, 0x00, 0x00, 0x0e, 0xc3, 0x01, 0xc7,
	0x6f, 0xa8, 0x64, 0x00, 0x00, 0x00, 0x18, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x00, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x20, 0x34, 0x2e,
	0x30, 0x2e, 0x39, 0x6c, 0x33, 0x7e, 0x4e, 0x00, 0x00, 0x02, 0xf2, 0x49, 0x44, 0x41, 0x54, 0x58,
	0x47, 0xdd, 0x97, 0x4f, 0x68, 0xd2, 0x61, 0x18, 0xc7, 0xed, 0x7f, 0x87, 0x45, 0x14, 0xd5, 0xa1,
	0x82, 0x08, 0x0a, 0x53, 0x52, 0x47, 0x23, 0xe8, 0x12, 0xf4, 0xe7, 0x5c, 0x74, 0xe9, 0x12, 0x05,
	0x41, 0x87, 0x4e, 0x1d, 0xa2, 0x5b, 0x10, 0x6e, 0x3a, 0xe7, 0xbf, 0x1d, 0x76, 0x31, 0x42, 0x09,
	0x0f, 0x13, 0x04, 0x3d, 0x84, 0x20, 0x0c, 0x22, 0x2f, 0x05, 0x2b, 0xc2, 0x8c, 0x22, 0x16, 0x89,
	0xab, 0x61, 0x39, 0x6d, 0x39, 0x9d, 0x3a, 0xe7, 0xe6, 0xbf, 0xf5, 0x7d, 0x7e, 0x7b, 0x8c, 0x58,
	0xfe, 0xe6, 0x6f, 0xfa, 0xd3, 0x43, 0x1f, 0xf8, 0x5c, 0xf4, 0x7d, 0xdf, 0xe7, 0xe7, 0xf3, 0x3e,
	0xef, 0xf3, 0x7b, 0x55, 0xfc, 0xc5, 0x5e, 0xa8, 0x86, 0x3a, 0x78, 0x14, 0x6e, 0x87, 0x3d, 0xe3,
	0x34, 0x7c, 0x0e, 0x33, 0xb0, 0x04, 0x3f, 0xc1, 0xc7, 0xf0, 0x02, 0xdc, 0x01, 0xbb, 0xca, 0x6e,
	0xe8, 0x53, 0x2a, 0x95, 0x75, 0xaf, 0xd7, 0x3b, 0x17, 0x0a, 0x85, 0xbe, 0x9b, 0x4c, 0xa6, 0xca,
	0xe0, 0xe0, 0x60, 0x9d, 0x3e, 0xc3, 0x77, 0x6f, 0x21, 0x3d, 0xc8, 0x36, 0xd8, 0x15, 0x8e, 0xc0,
	0x0f, 0x23, 0x23, 0x23, 0xe5, 0xd5, 0x75, 0x4c, 0x4d, 0x4d, 0xe5, 0x6c, 0x36, 0xdb, 0x32, 0x3f,
	0x48, 0x18, 0x3e, 0x84, 0x67, 0xe1, 0x4e, 0x28, 0x1b, 0x87, 0xe1, 0xfb, 0xe1, 0xe1, 0xe1, 0x2a,
	0xc7, 0xfd, 0x87, 0x54, 0x2a, 0x95, 0xc7, 0x03, 0x56, 0xf0, 0x20, 0x55, 0x8c, 0xfd, 0x05, 0x27,
	0xe0, 0x45, 0xb8, 0x05, 0x76, 0x0c, 0xfd, 0x1a, 0x17, 0xa5, 0x9c, 0xe3, 0x89, 0x52, 0x28, 0x14,
	0x96, 0xc6, 0xc7, 0xc7, 0xd3, 0x66, 0xb3, 0xb9, 0xcc, 0x59, 0x79, 0x03, 0x6f, 0xc1, 0x13, 0xb0,
	0xa3, 0x5a, 0x19, 0xc0, 0x82, 0xb5, 0xc9, 0xc9, 0xc9, 0x3c, 0xc7, 0x6a, 0x49, 0x22, 0x91, 0xc8,
	0x59, 0x2c, 0x96, 0x15, 0xce, 0xca, 0x17, 0xf8, 0x14, 0x76, 0x54, 0x2b, 0x4f, 0x90, 0x05, 0x5e,
	0x5e, 0x3a, 0xe9, 0x74, 0x3a, 0x3f, 0x3a, 0x3a, 0x5a, 0x32, 0x1a, 0x8d, 0x35, 0xce, 0xca, 0x6b,
	0x78, 0x19, 0xee, 0x81, 0x5b, 0xa1, 0x64, 0x0e, 0xea, 0x74, 0xba, 0x44, 0x30, 0x18, 0x2c, 0xf1,
	0xda, 0x9b, 0x26, 0x1a, 0x8d, 0x2e, 0x58, 0xad, 0xd6, 0x46, 0xd1, 0xbe, 0x83, 0x43, 0xf0, 0x1c,
	0x94, 0xbc, 0x3d, 0x43, 0xb4, 0x15, 0xd9, 0x6c, 0x76, 0x91, 0xd7, 0x6c, 0x8b, 0x64, 0x32, 0x99,
	0xe7, 0x8c, 0xd4, 0xb0, 0x66, 0x1e, 0x86, 0xe0, 0x79, 0x0a, 0xd0, 0x0a, 0x0d, 0x4c, 0x38, 0x9d,
	0xce, 0x05, 0x5e, 0xab, 0x23, 0x8a, 0xc5, 0x62, 0x89, 0x7a, 0x0b, 0xd7, 0x4a, 0x63, 0x7b, 0x6e,
	0xc0, 0x5d, 0xb0, 0x29, 0xb4, 0x67, 0x76, 0x83, 0xc1, 0xd0, 0xf2, 0x44, 0x6c, 0x16, 0x2a, 0x5a,
	0x3a, 0xca, 0x2a, 0x95, 0x8a, 0x3a, 0xad, 0x59, 0x88, 0x26, 0x42, 0x9f, 0x56, 0xab, 0x9d, 0x0b,
	0x04, 0x02, 0xcb, 0x3c, 0x57, 0x56, 0x1c, 0x0e, 0x07, 0x6d, 0x49, 0x02, 0x1e, 0x17, 0xa2, 0x89,
	0x70, 0x0f, 0x29, 0xab, 0xd2, 0x5e, 0xf2, 0x3c, 0xd9, 0xf0, 0xfb, 0xfd, 0x29, 0xac, 0x4f, 0xcd,
	0xec, 0x8c, 0x10, 0x49, 0x84, 0x63, 0xf0, 0x23, 0x2a, 0x7a, 0x85, 0xe7, 0xc9, 0x06, 0x9d, 0x12,
	0xac, 0x3d, 0x03, 0x0f, 0x50, 0x20, 0x31, 0xa8, 0xc5, 0x3e, 0xa2, 0x2a, 0xce, 0x64, 0x32, 0x05,
	0x9e, 0xdb, 0x36, 0xb1, 0x58, 0x2c, 0x47, 0x81, 0xa9, 0xcf, 0xf4, 0xf7, 0xf7, 0xff, 0xc0, 0xda,
	0xd7, 0x85, 0x28, 0x2d, 0xd8, 0x07, 0x93, 0x63, 0x63, 0x63, 0x45, 0x5e, 0x47, 0x32, 0xd3, 0xd3,
	0xd3, 0x39, 0x97, 0xcb, 0x95, 0xa5, 0x06, 0x45, 0x41, 0x69, 0x3b, 0xb1, 0x16, 0x9d, 0x80, 0x07,
	0xf0, 0x14, 0x94, 0xcc, 0x4d, 0x9a, 0x3c, 0x3b, 0x3b, 0x2b, 0xa9, 0x16, 0x3c, 0x1e, 0x4f, 0x8d,
	0x02, 0xa2, 0xd2, 0x8b, 0x98, 0xfb, 0x0d, 0xd2, 0xf9, 0xbf, 0x0f, 0x37, 0x2c, 0xb8, 0x8d, 0xe8,
	0x83, 0xaf, 0xa8, 0xa9, 0x70, 0x0c, 0x51, 0xf0, 0xa2, 0x2a, 0xd2, 0x96, 0x61, 0xbc, 0x07, 0x5e,
	0x81, 0x27, 0xa1, 0x2c, 0x97, 0x99, 0xbb, 0x94, 0x05, 0x4a, 0x2b, 0xc7, 0x6a, 0x0a, 0x5d, 0x64,
	0x30, 0xb6, 0x02, 0x2f, 0x09, 0xb3, 0x64, 0xe4, 0x10, 0xfc, 0xdc, 0xaa, 0x16, 0x7c, 0x3e, 0xdf,
	0x4f, 0x8c, 0x2b, 0x43, 0xba, 0x5f, 0xc8, 0xce, 0x35, 0x64, 0xa1, 0x1e, 0x8f, 0xc7, 0x45, 0xb3,
	0xc0, 0x0d, 0xe6, 0x2b, 0x94, 0xe5, 0x92, 0xd2, 0x8c, 0x17, 0x1b, 0xb5, 0x68, 0xd4, 0x09, 0x55,
	0xba, 0x6b, 0x6d, 0x68, 0x77, 0xb8, 0xaa, 0x56, 0xab, 0x17, 0x23, 0x91, 0x48, 0xd3, 0x2c, 0xe8,
	0xf5, 0xfa, 0x55, 0x8c, 0x91, 0x74, 0xbe, 0xdb, 0x85, 0xfe, 0x37, 0xbc, 0xa4, 0xeb, 0x18, 0xc7,
	0xfc, 0x03, 0xbd, 0x68, 0xf8, 0x04, 0xec, 0x17, 0x46, 0x76, 0x11, 0xa1, 0x16, 0xa8, 0xb3, 0x71,
	0x6c, 0x01, 0x6a, 0x3a, 0xf8, 0x2e, 0xb6, 0x36, 0xa4, 0xbb, 0xd0, 0xeb, 0x7a, 0x62, 0x7d, 0x5f,
	0xa0, 0x0b, 0x2d, 0x3e, 0x7f, 0x26, 0x8c, 0xe8, 0x01, 0x03, 0x1a, 0x8d, 0x66, 0xde, 0x6e, 0xb7,
	0x97, 0xc2, 0xe1, 0xf0, 0x8c, 0xdb, 0xed, 0x9e, 0x47, 0xe7, 0xa3, 0x17, 0xcc, 0x9d, 0xb5, 0xaf,
	0xbb, 0x0f, 0xfd, 0x67, 0xbc, 0x0d, 0x29, 0xed, 0x54, 0x78, 0x8d, 0x0b, 0x06, 0xd5, 0x48, 0x4f,
	0xa1, 0x07, 0xa1, 0x2b, 0x5c, 0xcf, 0x03, 0xff, 0x4f, 0x28, 0x14, 0xbf, 0x01, 0xd1, 0xc6, 0x25,
	0x82, 0x26, 0x77, 0xb0, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60,
	0x82 
};

static void drawImage(video::IVideoDriver* driver, const video::ITexture* texture,
					  core::rect<s32> sourceRect, core::rect<s32> destRect, core::vector2d<s32> rotationCenter,
					  f32 rotation, video::SColor color = 0xffffffff)
{
	video::SMaterial material;// = driver->getMaterial2D();

	// Store and clear the projection matrix
	core::matrix4 oldProjMat = driver->getTransform(video::ETS_PROJECTION);
	driver->setTransform(video::ETS_PROJECTION, core::matrix4());

	// Store and clear the view matrix
	core::matrix4 oldViewMat = driver->getTransform(video::ETS_VIEW);
	driver->setTransform(video::ETS_VIEW, core::matrix4());

	// Find the positions of corners
	core::vector2di corner[4];
	corner[0] = core::vector2di(destRect.UpperLeftCorner.X, destRect.UpperLeftCorner.Y);
	corner[1] = core::vector2di(destRect.LowerRightCorner.X, destRect.UpperLeftCorner.Y);
	corner[2] = core::vector2di(destRect.UpperLeftCorner.X, destRect.LowerRightCorner.Y);
	corner[3] = core::vector2di(destRect.LowerRightCorner.X, destRect.LowerRightCorner.Y);;

	// Rotate corners
	if (rotation != 0.0f)
	{
		rotationCenter += destRect.UpperLeftCorner;
		for (int x = 0; x < 4; x++)
			corner[x].rotateBy(rotation, rotationCenter);
	}

	// Find the uv coordinates of the sourceRect
	core::vector2df invTexSize(1.f / texture->getSize().Width, 1.f / texture->getSize().Height);
	core::vector2df uvCorner[4];
	uvCorner[0] = core::vector2df((f32)sourceRect.UpperLeftCorner.X,  (f32)sourceRect.UpperLeftCorner.Y) * invTexSize;
	uvCorner[1] = core::vector2df((f32)sourceRect.LowerRightCorner.X, (f32)sourceRect.UpperLeftCorner.Y) * invTexSize;
	uvCorner[2] = core::vector2df((f32)sourceRect.UpperLeftCorner.X,  (f32)sourceRect.LowerRightCorner.Y) * invTexSize;
	uvCorner[3] = core::vector2df((f32)sourceRect.LowerRightCorner.X, (f32)sourceRect.LowerRightCorner.Y) * invTexSize;

	// Vertices for the image
	video::S3DVertex vertices[4];
	u16 indices[6] = { 0, 1, 2, 3 ,2 ,1 };

	// Convert pixels to world coordinates
	float screenWidth = (f32)driver->getScreenSize().Width;
	float screenHeight = (f32)driver->getScreenSize().Height;
	for (int x = 0; x < 4; x++)
	{
		float screenPosX = ((corner[x].X / screenWidth) - 0.5f) * 2.0f;
		float screenPosY = ((corner[x].Y / screenHeight) - 0.5f) * -2.0f;
		vertices[x].Pos = core::vector3df(screenPosX, screenPosY, 1);
		vertices[x].TCoords = uvCorner[x];
		vertices[x].Color = color;
	}
	material.Lighting = false;
	material.ZWriteEnable = false;
	material.ZBuffer = false;
	material.TextureLayer[0].Texture = const_cast<video::ITexture*>(texture);
	material.MaterialType = video::EMT_ONETEXTURE_BLEND; // video::EMT_TRANSPARENT_ALPHA_CHANNEL; // video::EMT_SOLID;
	material.MaterialTypeParam =
		video::pack_textureBlendFunc(irr::video::EBF_SRC_ALPHA, irr::video::EBF_ONE_MINUS_SRC_ALPHA,
			irr::video::EMFN_MODULATE_1X, irr::video::EAS_TEXTURE | irr::video::EAS_VERTEX_COLOR);
	//material.TextureLayer[0].TextureWrapU = video::ETC_CLAMP;
	//material.TextureLayer[0].TextureWrapV = video::ETC_CLAMP;

	driver->setMaterial(material);
	driver->drawIndexedTriangleList(&vertices[0], 4, &indices[0], 2);

	// Restore projection and view matrices
	driver->setTransform(video::ETS_PROJECTION, oldProjMat);
	driver->setTransform(video::ETS_VIEW, oldViewMat);
}


MousePointer::MousePointer(Application* app) :
	m_app(app)
{
	io::IReadFile* f = app->getDevice()->getFileSystem()->createMemoryReadFile(mouse, sizeof(mouse), "mouse");
	m_texture = app->getDriver()->getTexture(f);
	f->drop();
}

MousePointer::~MousePointer()
{
}

void MousePointer::render()
{
	core::vector2di mouse_pos = m_app->getInputManager()->getMousePosition();
	float angle = (float)std::atan2(mouse_pos.X - m_mouse_back_pos.X, -mouse_pos.Y + m_mouse_back_pos.Y);

	drawImage(m_app->getDriver(), m_texture, core::recti{ {0, 0}, {32, 32} }, core::recti{ mouse_pos, mouse_pos + core::vector2di{32, 32} }, { 0, 0 }, core::radToDeg(angle) + 45);

	m_mouse_back_pos = mouse_pos;
	m_mouse_back_pos.X -= (s32)(std::sin(angle) * 32.f);
	m_mouse_back_pos.Y += (s32)(std::cos(angle) * 32.f);
}
